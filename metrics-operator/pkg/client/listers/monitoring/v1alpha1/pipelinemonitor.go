/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/experimental/metrics-operator/pkg/apis/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PipelineMonitorLister helps list PipelineMonitors.
// All objects returned here must be treated as read-only.
type PipelineMonitorLister interface {
	// List lists all PipelineMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PipelineMonitor, err error)
	// PipelineMonitors returns an object that can list and get PipelineMonitors.
	PipelineMonitors(namespace string) PipelineMonitorNamespaceLister
	PipelineMonitorListerExpansion
}

// pipelineMonitorLister implements the PipelineMonitorLister interface.
type pipelineMonitorLister struct {
	indexer cache.Indexer
}

// NewPipelineMonitorLister returns a new PipelineMonitorLister.
func NewPipelineMonitorLister(indexer cache.Indexer) PipelineMonitorLister {
	return &pipelineMonitorLister{indexer: indexer}
}

// List lists all PipelineMonitors in the indexer.
func (s *pipelineMonitorLister) List(selector labels.Selector) (ret []*v1alpha1.PipelineMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PipelineMonitor))
	})
	return ret, err
}

// PipelineMonitors returns an object that can list and get PipelineMonitors.
func (s *pipelineMonitorLister) PipelineMonitors(namespace string) PipelineMonitorNamespaceLister {
	return pipelineMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PipelineMonitorNamespaceLister helps list and get PipelineMonitors.
// All objects returned here must be treated as read-only.
type PipelineMonitorNamespaceLister interface {
	// List lists all PipelineMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PipelineMonitor, err error)
	// Get retrieves the PipelineMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PipelineMonitor, error)
	PipelineMonitorNamespaceListerExpansion
}

// pipelineMonitorNamespaceLister implements the PipelineMonitorNamespaceLister
// interface.
type pipelineMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PipelineMonitors in the indexer for a given namespace.
func (s pipelineMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PipelineMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PipelineMonitor))
	})
	return ret, err
}

// Get retrieves the PipelineMonitor from the indexer for a given namespace and name.
func (s pipelineMonitorNamespaceLister) Get(name string) (*v1alpha1.PipelineMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pipelinemonitor"), name)
	}
	return obj.(*v1alpha1.PipelineMonitor), nil
}
