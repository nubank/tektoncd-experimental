/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/experimental/metrics-operator/pkg/apis/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PipelineRunMonitorLister helps list PipelineRunMonitors.
// All objects returned here must be treated as read-only.
type PipelineRunMonitorLister interface {
	// List lists all PipelineRunMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PipelineRunMonitor, err error)
	// PipelineRunMonitors returns an object that can list and get PipelineRunMonitors.
	PipelineRunMonitors(namespace string) PipelineRunMonitorNamespaceLister
	PipelineRunMonitorListerExpansion
}

// pipelineRunMonitorLister implements the PipelineRunMonitorLister interface.
type pipelineRunMonitorLister struct {
	indexer cache.Indexer
}

// NewPipelineRunMonitorLister returns a new PipelineRunMonitorLister.
func NewPipelineRunMonitorLister(indexer cache.Indexer) PipelineRunMonitorLister {
	return &pipelineRunMonitorLister{indexer: indexer}
}

// List lists all PipelineRunMonitors in the indexer.
func (s *pipelineRunMonitorLister) List(selector labels.Selector) (ret []*v1alpha1.PipelineRunMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PipelineRunMonitor))
	})
	return ret, err
}

// PipelineRunMonitors returns an object that can list and get PipelineRunMonitors.
func (s *pipelineRunMonitorLister) PipelineRunMonitors(namespace string) PipelineRunMonitorNamespaceLister {
	return pipelineRunMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PipelineRunMonitorNamespaceLister helps list and get PipelineRunMonitors.
// All objects returned here must be treated as read-only.
type PipelineRunMonitorNamespaceLister interface {
	// List lists all PipelineRunMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PipelineRunMonitor, err error)
	// Get retrieves the PipelineRunMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PipelineRunMonitor, error)
	PipelineRunMonitorNamespaceListerExpansion
}

// pipelineRunMonitorNamespaceLister implements the PipelineRunMonitorNamespaceLister
// interface.
type pipelineRunMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PipelineRunMonitors in the indexer for a given namespace.
func (s pipelineRunMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PipelineRunMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PipelineRunMonitor))
	})
	return ret, err
}

// Get retrieves the PipelineRunMonitor from the indexer for a given namespace and name.
func (s pipelineRunMonitorNamespaceLister) Get(name string) (*v1alpha1.PipelineRunMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pipelinerunmonitor"), name)
	}
	return obj.(*v1alpha1.PipelineRunMonitor), nil
}
