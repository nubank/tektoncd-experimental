/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/experimental/metrics-operator/pkg/apis/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TaskMonitorLister helps list TaskMonitors.
// All objects returned here must be treated as read-only.
type TaskMonitorLister interface {
	// List lists all TaskMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TaskMonitor, err error)
	// TaskMonitors returns an object that can list and get TaskMonitors.
	TaskMonitors(namespace string) TaskMonitorNamespaceLister
	TaskMonitorListerExpansion
}

// taskMonitorLister implements the TaskMonitorLister interface.
type taskMonitorLister struct {
	indexer cache.Indexer
}

// NewTaskMonitorLister returns a new TaskMonitorLister.
func NewTaskMonitorLister(indexer cache.Indexer) TaskMonitorLister {
	return &taskMonitorLister{indexer: indexer}
}

// List lists all TaskMonitors in the indexer.
func (s *taskMonitorLister) List(selector labels.Selector) (ret []*v1alpha1.TaskMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TaskMonitor))
	})
	return ret, err
}

// TaskMonitors returns an object that can list and get TaskMonitors.
func (s *taskMonitorLister) TaskMonitors(namespace string) TaskMonitorNamespaceLister {
	return taskMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TaskMonitorNamespaceLister helps list and get TaskMonitors.
// All objects returned here must be treated as read-only.
type TaskMonitorNamespaceLister interface {
	// List lists all TaskMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TaskMonitor, err error)
	// Get retrieves the TaskMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TaskMonitor, error)
	TaskMonitorNamespaceListerExpansion
}

// taskMonitorNamespaceLister implements the TaskMonitorNamespaceLister
// interface.
type taskMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TaskMonitors in the indexer for a given namespace.
func (s taskMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TaskMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TaskMonitor))
	})
	return ret, err
}

// Get retrieves the TaskMonitor from the indexer for a given namespace and name.
func (s taskMonitorNamespaceLister) Get(name string) (*v1alpha1.TaskMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("taskmonitor"), name)
	}
	return obj.(*v1alpha1.TaskMonitor), nil
}
