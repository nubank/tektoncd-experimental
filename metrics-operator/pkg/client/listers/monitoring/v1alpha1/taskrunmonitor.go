/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/experimental/metrics-operator/pkg/apis/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TaskRunMonitorLister helps list TaskRunMonitors.
// All objects returned here must be treated as read-only.
type TaskRunMonitorLister interface {
	// List lists all TaskRunMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TaskRunMonitor, err error)
	// TaskRunMonitors returns an object that can list and get TaskRunMonitors.
	TaskRunMonitors(namespace string) TaskRunMonitorNamespaceLister
	TaskRunMonitorListerExpansion
}

// taskRunMonitorLister implements the TaskRunMonitorLister interface.
type taskRunMonitorLister struct {
	indexer cache.Indexer
}

// NewTaskRunMonitorLister returns a new TaskRunMonitorLister.
func NewTaskRunMonitorLister(indexer cache.Indexer) TaskRunMonitorLister {
	return &taskRunMonitorLister{indexer: indexer}
}

// List lists all TaskRunMonitors in the indexer.
func (s *taskRunMonitorLister) List(selector labels.Selector) (ret []*v1alpha1.TaskRunMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TaskRunMonitor))
	})
	return ret, err
}

// TaskRunMonitors returns an object that can list and get TaskRunMonitors.
func (s *taskRunMonitorLister) TaskRunMonitors(namespace string) TaskRunMonitorNamespaceLister {
	return taskRunMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TaskRunMonitorNamespaceLister helps list and get TaskRunMonitors.
// All objects returned here must be treated as read-only.
type TaskRunMonitorNamespaceLister interface {
	// List lists all TaskRunMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TaskRunMonitor, err error)
	// Get retrieves the TaskRunMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TaskRunMonitor, error)
	TaskRunMonitorNamespaceListerExpansion
}

// taskRunMonitorNamespaceLister implements the TaskRunMonitorNamespaceLister
// interface.
type taskRunMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TaskRunMonitors in the indexer for a given namespace.
func (s taskRunMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TaskRunMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TaskRunMonitor))
	})
	return ret, err
}

// Get retrieves the TaskRunMonitor from the indexer for a given namespace and name.
func (s taskRunMonitorNamespaceLister) Get(name string) (*v1alpha1.TaskRunMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("taskrunmonitor"), name)
	}
	return obj.(*v1alpha1.TaskRunMonitor), nil
}
